@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

@model PDFUploadWebApplication.Core.DTO.RegisterDto
@{
    ViewData["Title"] = "Register";
}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-lg rounded-4">
                <div class="card-header text-center bg-success text-white">
                    <h4>Register</h4>
                </div>
                <div class="card-body">
                    <!-- Display Validation Errors Here -->
                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger">
                            @foreach (var error in ViewData.ModelState.Values)
                            {
                                foreach (var errorMessage in error.Errors)
                                {
                                    <p>@errorMessage.ErrorMessage</p>
                                }
                            }
                        </div>
                    }

                    <form id="registerForm">
                        <div class="mb-3">
                            <label asp-for="Username" class="form-label"></label>
                            <input asp-for="Username" class="form-control" id="username" />
                            <span asp-validation-for="Username" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Email" class="form-label"></label>
                            <input asp-for="Email" class="form-control" type="email" id="email" />
                            <span asp-validation-for="Email" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Password" class="form-label"></label>
                            <input asp-for="Password" class="form-control" type="password" id="password" />
                            <span asp-validation-for="Password" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="ConfirmPassword" class="form-label"></label>
                            <input asp-for="ConfirmPassword" class="form-control" type="password" id="confirmPassword" />
                            <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-success">Register</button>
                        </div>
                    </form>
                </div>
                <div class="card-footer text-center">
                    <small>Already have an account? <a asp-action="Login">Login here</a></small>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="validationPopup" class="alert alert-danger d-none position-fixed top-0 start-50 translate-middle-x mt-2" style="z-index: 1050;">
    <p id="validationMessage"></p>
</div>
<script>
    document.getElementById("registerForm").addEventListener("submit", async function(event) {
        event.preventDefault();

        const data = {
            username: document.getElementById("username").value,
            email: document.getElementById("email").value,
            password: document.getElementById("password").value,
            confirmPassword: document.getElementById("confirmPassword").value
        };

        const response = await fetch('/Auth/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            window.location.href = "/Auth/login"; // ✅ Redirects to login page
        } else {
            const result = await response.json();
            console.error(result);

            // ✅ Show validation error in a popup for 5 seconds
            const popup = document.getElementById("validationPopup");
            const message = document.getElementById("validationMessage");

            message.innerText = result.message || "Registration failed due to unknown error.";
            popup.classList.remove("d-none");

            setTimeout(() => {
                popup.classList.add("d-none"); // ✅ Hide after 5 seconds
            }, 5000);
        }
    });
</script>

@* <script>
    document.getElementById("registerForm").addEventListener("submit", async function(event) {
        event.preventDefault();

        const data = {
            username: document.getElementById("username").value,
            email: document.getElementById("email").value,
            password: document.getElementById("password").value,
            confirmPassword: document.getElementById("confirmPassword").value
        };

        const response = await fetch('/Auth/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            window.location.href = "/Auth/login"; // ✅ Redirects to login page
        } else {
            const result = await response.json();
            console.error(result);
            alert("Registration failed: " + (result.message || "Unknown error"));
        }
    });
</script>
 *@
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}

